#!/usr/bin/env ruby
require 'rubygems'
require 'bundler/setup'
require 'net/ssh'
require 'ed25519'
require 'iniparse'
require 'yaml'
require 'optparse'
require 'ostruct'
require 'net/ssh/multi'
class Job
attr_accessor :stdout 
attr_accessor :stderr 

# Loading script parameters
    job = Job.new 
    options = OpenStruct.new
      OptionParser.new do |opt|
      opt.on('-s', '--servers servers', "We specify the server name: -s/--servers=name.server") { |o| options.servers = o }
      opt.on('-c', '--command Command', "Enter the name of the command: -c/--command='!command'") { |o| options.command = o }
    end.parse!
# Uploading the main configuration file
    config = IniParse.parse(File.read('/etc/srvtools/config.ini'))
    users = "#{config['Users']['user']}"
    hostpath = "#{config['Setting']['mypath']}"
    key = "#{config['Users']['key']}"
# Uploading the main file with server data for connection
    yaml = YAML.load_file(hostpath)
    #server = options.servers
    puts options.servers
    address = "#{yaml["#{options.servers}"]['hostname']}"
    port = "#{yaml["#{options.servers}"]['port']}"
    cmd = options.command
# Making the connection
    Net::SSH.start(address, users, {:keys => key, :port => port}) do |ssh|
    job.stdout = ""
    job.stderr = ""
    ssh.exec!  cmd do | channel, stream, data|
      job.stdout << data if stream == :stdout
      job.stderr << data if stream == :stderr 
   end 
  end 
  end  
